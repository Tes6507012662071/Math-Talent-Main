import { Request, Response } from "express";
import Registration from "../models/Registration";
import IndividualRegistration from "../models/IndividualRegistration";

// ‚úÖ ‡∏•‡∏ö CustomRequest ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Äî ‡πÉ‡∏ä‡πâ global type

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• registration ‡∏Ç‡∏≠‡∏á user ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡πÅ‡∏™‡∏î‡∏á event + status)
export const getMyEvents = async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const registrations = await Registration.find({ user: userId })
      .populate("event")
      .exec();

    res.json(registrations);
  } catch (error) {
    console.error("getMyEvents error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

export const uploadSlip = async (req: Request, res: Response) => {
  try {
    const eventId = req.params.id;
    const userId = req.user?.id;
    const slipPath = req.file?.path;

    console.log("üì• uploadSlip called:", { eventId, userId, slipPath });

    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    if (!slipPath) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå slip" });
    }

    const registration = await Registration.findOneAndUpdate(
      { event: eventId, user: userId },
      { slipUrl: slipPath, status: "slip_uploaded" },
      { new: true, upsert: true }
    );

    console.log("‚úÖ Slip uploaded for registration:", registration._id);

    res.status(200).json({
      message: "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
      registration,
    });

  } catch (err) {
    console.error("‚ùå uploadSlip error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏° Event
export const getApplicantsByEvent = async (req: Request, res: Response) => {
  try {
    const { eventId } = req.params;

    const applicants = await IndividualRegistration.find({ eventId })
      .populate("userId", "fullname userCode email")
      .populate("eventId", "title");

    res.json(applicants);
  } catch (error) {
    console.error("‚ùå getApplicantsByEvent error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£" });
  }
};