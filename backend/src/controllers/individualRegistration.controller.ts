import path from "path";
import { Request, Response } from "express";
import IndividualRegistration from "../models/IndividualRegistration";
import Event, { IStation } from "../models/Event";
import fs from "fs";
import multer from "multer";

const uploadFolder = path.join(__dirname, "../../uploads/slips");
if (!fs.existsSync(uploadFolder)) fs.mkdirSync(uploadFolder, { recursive: true });

const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadFolder),
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

export const uploadSlipMiddleware = multer({ storage });

// Mapping ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô ‚Üí ‡∏£‡∏´‡∏±‡∏™ 2 ‡∏´‡∏•‡∏±‡∏Å
const GRADE_TO_LL: Record<string, string> = {
  "‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢": "01",
  "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô": "02",
  "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢": "03",
};

// REGISTER INDIVIDUAL
export const registerIndividual = async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ message: "Unauthorized" });

    const { eventId, fullname, grade, school, station: stationName, phone, email } = req.body;

    // 1. ‡∏î‡∏∂‡∏á event
    const event = await Event.findById(eventId).lean();
    if (!event) return res.status(404).json({ message: "Event not found" });

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö station
    const selectedStation = event.stations.find((s: IStation) => s.stationName === stationName);
    if (!selectedStation) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô
    const LL = GRADE_TO_LL[grade];
    if (!LL) return res.status(400).json({ message: "Invalid grade" });

    // 4. ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å event.dateAndTime
    const YY = String(new Date(event.dateAndTime).getFullYear()).slice(-2);

    // 5. ‡∏£‡∏´‡∏±‡∏™‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏™‡∏≠‡∏ö (2 ‡∏´‡∏•‡∏±‡∏Å)
    const SS = String(selectedStation.code).padStart(2, "0");

    // 6. ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (4 ‡∏´‡∏•‡∏±‡∏Å) ‚Äî ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ event ‡∏ô‡∏µ‡πâ
    const count = await IndividualRegistration.countDocuments({ eventId });
    const CCCC = String(count + 1).padStart(4, "0");

    // 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™
    const userCode = `${YY}${SS}${LL}${CCCC}`;
    const adminCode = `${event.code}${userCode}`; // ‡πÄ‡∏ä‡πà‡∏ô "012503030012"

    // 8. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const newRegistration = new IndividualRegistration({
      eventId,
      fullname,
      grade,
      school,
      phone,
      email,
      userId,
      status: "registered",
      userCode,
      adminCode, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
      stationName, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    });

    await newRegistration.save();

    res.status(201).json({
      success: true,
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      userCode, // ‚úÖ ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ user ‡πÄ‡∏´‡πá‡∏ô
    });
  } catch (error) {
    console.error("‚ùå Register Individual Error:", error);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// GET MY REGISTRATIONS
export const getMyRegistrations = async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ error: "Unauthorized" });

    const registrations = await IndividualRegistration.find({ userId })
      .populate("eventId")
      .exec();

    const transformedData = registrations
      .map((reg: any) => {
        if (!reg.eventId) return null;
        return {
          _id: reg._id,
          event: {
            _id: reg.eventId._id,
            title: reg.eventId.nameEvent, // ‚úÖ nameEvent ‡πÅ‡∏ó‡∏ô title
            description: reg.eventId.detail, // ‚úÖ detail ‡πÅ‡∏ó‡∏ô description
            date: reg.eventId.dateAndTime, // ‚úÖ dateAndTime ‡πÅ‡∏ó‡∏ô date
            location: reg.eventId.location,
            detail: reg.eventId.detail,
            registrationType: reg.eventId.registrationType,
            image: reg.eventId.images, // ‚úÖ images ‡πÅ‡∏ó‡∏ô image
            examSchedules: reg.eventId.stations, // ‚úÖ stations ‡πÅ‡∏ó‡∏ô examSchedules
          },
          fullname: reg.fullname,
          grade: reg.grade,
          school: reg.school,
          phone: reg.phone,
          email: reg.email,
          status: reg.status,
          slipUrl: reg.slipUrl,
          certificateUrl: reg.certificateUrl,
          userCode: reg.userCode,
          adminCode: reg.adminCode, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin ‡πÉ‡∏ä‡πâ)
          registrationId: reg._id,
          createdAt: reg.createdAt,
        };
      })
      .filter(Boolean);

    res.json(transformedData);
  } catch (error) {
    console.error("getMyRegistrations error:", error);
    res.status(500).json({ error: "Server error" });
  }
};

// UPLOAD SLIP
export const uploadSlipToIndividualRegistration = async (req: Request, res: Response) => {
  try {
    const registrationId = req.params.id;
    const userId = req.user?.id;
    const file = req.file;

    if (!file) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå slip" });
    }
    const slipUrl = `${req.protocol}://${req.get("host")}/uploads/slips/${file.filename}`;

    console.log("üì• Uploaded file:", req.file);
    console.log("üåê Slip URL saved:", slipUrl);
    
    const registration = await IndividualRegistration.findOneAndUpdate(
      { _id: registrationId, userId },
      { slipUrl, status: "slip_uploaded" },
      { new: true }
    ).populate("eventId");

    if (!registration) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" });

    res.status(200).json({
      message: "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
      registration,
    });
  } catch (err) {
    console.error("‚ùå uploadSlip error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// üü¢ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ï‡∏≤‡∏° event
export const getApplicantsByEvent = async (req: Request, res: Response) => {
  try {
    const { eventId } = req.params;

    const event = await Event.findById(eventId);
    if (!event) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" });

    const applicants = await IndividualRegistration.find({ eventId }).sort({ createdAt: 1 });

    const result = applicants.map(a => ({
      _id: a._id,
      userCode: a.userCode,
      fullname: a.fullname,
      email: a.email,
      status: a.status,
      slipUrl: a.slipUrl,
    }));

    console.log("Sending applicants:", result);
    res.json({ eventName: event.nameEvent, applicants: result });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
export const updateApplicantStatus = async (req: Request, res: Response) => {
  try {
    const { registrationId } = req.params;
    const { status } = req.body;

    const updated = await IndividualRegistration.findByIdAndUpdate(
      registrationId,
      { status },
      { new: true }
    ).populate("userId", "fullname email");

    if (!updated) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£" });

    res.json({ success: true, registration: updated });
  } catch (error) {
    console.error("‚ùå updateApplicantStatus error:", error);
    res.status(500).json({ message: "Server error" });
  }
};