import { Request, Response } from "express";
import path from "path";
import fs from "fs";
import Certificate from "../models/Certificate";
import IndividualRegistration from "../models/IndividualRegistration";

const CERT_FOLDER = path.join(__dirname, "../../uploads/certificates");

// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå PDF
export const uploadCertificates = async (req: Request, res: Response) => {
  try {
    const files = req.files as Express.Multer.File[];
    const { eventId } = req.body;

    if (!eventId) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ eventId" });
    }

    if (!files || files.length === 0) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå" });
    }

    const savedCertificates = [];

    for (const file of files) {
      // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö 250101001_Test.pdf ‡πÅ‡∏•‡∏∞ 250101001.pdf
      const match = file.originalname.match(/^(\d+)/);
      if (!match) continue;

      const userCode = match[1];

      // ‚úÖ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DB
      const certificateUrl = `/uploads/certificates/${eventId}/${file.originalname}`;

      // ‚úÖ upsert ‡πÉ‡∏™‡πà eventId ‡∏î‡πâ‡∏ß‡∏¢
      const cert = await Certificate.findOneAndUpdate(
        { userCode, eventId },
        {
          userCode,
          eventId,
          certificateUrl,
          uploadedAt: new Date(),
        },
        { upsert: true, new: true }
      );

      savedCertificates.push(cert);
    }

    return res.status(200).json({
      message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Certificate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: savedCertificates,
    });
  } catch (error) {
    console.error("‚ùå uploadCertificates error:", error);
    return res.status(500).json({ message: "Server error", error });
  }
};


export const downloadCertificate = async (req: Request, res: Response) => {
  try {
    const { userCode, eventId } = req.params;

    console.log("üì• Download request:", { eventId, userCode });  

    if (!userCode || !eventId) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userCode ‡πÅ‡∏•‡∏∞ eventId" });
    }

    const registration = await IndividualRegistration.findOne({ userCode, eventId });
    if (!registration) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" });

    if (registration.status !== "completed") {
      return res.status(403).json({ message: "‚ùå Certificate ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î" });
    }

    const cert = await Certificate.findOne({ userCode, eventId });
    if (!cert) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Certificate" });

    // ‚úÖ ‡πÉ‡∏ä‡πâ path.resolve ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô path error
    const filePath = path.resolve(`.${cert.certificateUrl}`);

    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Certificate" });
    }

    return res.download(filePath, `${userCode}_Certificate.pdf`);
  } catch (error) {
    console.error("‚ùå downloadCertificate error:", error);
    return res.status(500).json({ message: "Server error", error });
  }
};


// üìå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ Certificate ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° EventId
export const getCertificatesByEvent = async (req: Request, res: Response) => {
  try {
    const { eventId } = req.params;

    if (!eventId) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ eventId" });
    }

    const certificates = await Certificate.find({ eventId }).sort({ uploadedAt: -1 });

    return res.status(200).json({
      message: "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Certificate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: certificates,
    });
  } catch (error) {
    console.error("‚ùå getCertificatesByEvent error:", error);
    return res.status(500).json({ message: "Server error", error });
  }
};
