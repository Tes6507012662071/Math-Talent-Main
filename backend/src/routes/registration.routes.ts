// routes/registrationRoutes.ts
import express from "express";
import authMiddleware from "../middleware/authMiddleware";
import multer from "multer";
import Registration from "../models/Registration";

const upload = multer({ dest: "uploads/slips" });
const router = express.Router();

router.get("/myevents", authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).user.id; // üëà ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ .user.id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà .userId
    const registrations = await Registration.find({ user: userId }).populate("event");
    res.json(registrations);
  } catch (err) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: Upload slip ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ eventId + userId
router.post("/upload-slip/:id", authMiddleware, upload.single("slip"), async (req, res) => {
  try {
    const eventId = req.params.id;
    const userId = (req as any).user.id; // ‡∏°‡∏≤‡∏à‡∏≤‡∏Å authMiddleware
    const filePath = req.file?.path;

    if (!filePath) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" });
    }

    const registration = await Registration.findOneAndUpdate(
      { event: eventId, user: userId },
      { slipUrl: filePath, status: "pending" }, // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ "slip_uploaded" ‡∏Å‡πá‡πÑ‡∏î‡πâ
      { new: true }
    );

    if (!registration) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö event ‡∏ô‡∏µ‡πâ" });
    }

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", registration });
  } catch (err) {
    console.error("Upload slip error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

export default router;
