import React, { useState } from "react";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import * as XLSX from "xlsx";
import { submitIndividualForm } from "../api/individualForm";

interface Student {
  fullname: string;
  grade: string;
  school: string;
  phone: string;
  email: string;
  note?: string;
}

const Apply: React.FC = () => {
  const { eventId } = useParams();
  const [type, setType] = useState<"individual" | "school" | null>(null);

  return (
    <div className="max-w-3xl mx-auto px-6 py-10">
      <h1 className="text-2xl font-bold mb-4">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° #{eventId}</h1>

      {!type && (
        <div className="space-y-4">
          <p>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</p>
          <button
            className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
            onClick={() => setType("individual")}
          >
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
          </button>
          <button
            className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700"
            onClick={() => setType("school")}
          >
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Excel)
          </button>
        </div>
      )}

      {type === "individual" && <IndividualForm eventId={eventId!} />}
      {type === "school" && <SchoolUploadForm eventId={eventId!} />}
    </div>
  );
};

export default Apply;

// ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Component 2 ‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ:
const IndividualForm = ({ eventId }: { eventId: string }) => {
  const [form, setForm] = useState({
    fullname: "",
    grade: "",
    school: "",
    phone: "",
    email: "",
    note: "",
  });
  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const token = localStorage.getItem("token");
    if (!token) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£");
      return;
    }
    console.log("üéØ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:", eventId, form);
    
    // üîú ‡∏ï‡πà‡∏≠ backend / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try {
      await submitIndividualForm(token, { eventId, ...form });
      alert("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      console.log("‚úÖ eventId ‡∏à‡∏≤‡∏Å URL:", eventId);
      // üîÑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
      navigate(`/events/${eventId}`);
    } catch (error: any) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + (error.message || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"));
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white shadow p-6 rounded space-y-4 mt-6">
      <h2 className="text-xl font-bold">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h2>

      <div>
        <label className="block mb-1 font-medium">‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
        <input
          type="text"
          name="fullname"
          value={form.fullname}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        />
      </div>

      <div>
        <label className="block mb-1 font-medium">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô</label>
        <select
          name="grade"
          value={form.grade}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        >
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô --</option>
          <option value="‡∏õ.6">‡∏õ.6</option>
          <option value="‡∏°.1">‡∏°.1</option>
          <option value="‡∏°.2">‡∏°.2</option>
          <option value="‡∏°.3">‡∏°.3</option>
          <option value="‡∏°.4">‡∏°.4</option>
          <option value="‡∏°.5">‡∏°.5</option>
          <option value="‡∏°.6">‡∏°.6</option>
        </select>
      </div>

      <div>
        <label className="block mb-1 font-medium">‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
        <input
          type="text"
          name="school"
          value={form.school}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        />
      </div>

      <div>
        <label className="block mb-1 font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
        <input
          type="text"
          name="phone"
          value={form.phone}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        />
      </div>

      <div>
        <label className="block mb-1 font-medium">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
        <input
          type="email"
          name="email"
          value={form.email}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        />
      </div>

      <div>
        <label className="block mb-1 font-medium">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
        <textarea
          name="note"
          value={form.note}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          rows={3}
        />
      </div>

      <button
        type="submit"
        className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
      >
        ‡∏™‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≠‡∏ö
      </button>
    </form>
  );
};

const SchoolUploadForm = ({ eventId }: { eventId: string }) => {
  const [file, setFile] = useState<File | null>(null);
  const [students, setStudents] = useState<Student[]>([]);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0];
    if (!f) return;
    setFile(f);
    setError(null);

    const reader = new FileReader();
    reader.onload = (evt) => {
      const data = evt.target?.result;
      if (typeof data === "string" || data instanceof ArrayBuffer) {
        const workbook = XLSX.read(data, { type: "binary" });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData: any[] = XLSX.utils.sheet_to_json(worksheet, { defval: "" });

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Student interface
        const parsed: Student[] = jsonData.map((row) => ({
          fullname: row["‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"] || "",
          grade: row["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô"] || "",
          school: row["‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"] || "",
          phone: row["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"] || "",
          email: row["‡∏≠‡∏µ‡πÄ‡∏°‡∏•"] || "",
          note: row["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] || "",
        }));

        setStudents(parsed);
      }
    };
    reader.readAsBinaryString(f);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (students.length === 0) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á");
      return;
    }

    console.log("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", students);

    alert("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (mock)");

    const token = localStorage.getItem('token');
    // TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° backend
    try {
      const response = await fetch(`${import.meta.env.VITE_API_BASE}/register/school`, {
        method: "POST",
        headers: { "Content-Type": "application/json","Authorization": `Bearer ${token}` },
        body: JSON.stringify({ eventId, students }),
      });

      if (response.ok) {
        alert("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
        navigate(`/events/${eventId}`);
      } else {
        const err = await response.json();
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + err.message);
      }
    } catch (err) {
      console.error(err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-6 bg-white p-6 rounded shadow space-y-4">
      <h2 className="text-xl font-bold mb-4">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Excel)</h2>

      <input
        type="file"
        accept=".xlsx,.xls"
        onChange={handleFileChange}
        className="border rounded p-2"
      />

      {error && <p className="text-red-600">{error}</p>}

      {students.length > 0 && (
        <>
          <h3 className="font-semibold mt-4 mb-2">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå</h3>
          <div className="overflow-x-auto max-h-64 border rounded">
            <table className="w-full border-collapse border border-gray-300 text-sm">
              <thead className="bg-gray-100 sticky top-0">
                <tr>
                  <th className="border border-gray-300 px-2 py-1">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                  <th className="border border-gray-300 px-2 py-1">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô</th>
                  <th className="border border-gray-300 px-2 py-1">‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
                  <th className="border border-gray-300 px-2 py-1">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                  <th className="border border-gray-300 px-2 py-1">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                  <th className="border border-gray-300 px-2 py-1">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                </tr>
              </thead>
              <tbody>
                {students.map((stu, i) => (
                  <tr key={i}>
                    <td className="border border-gray-300 px-2 py-1">{stu.fullname}</td>
                    <td className="border border-gray-300 px-2 py-1">{stu.grade}</td>
                    <td className="border border-gray-300 px-2 py-1">{stu.school}</td>
                    <td className="border border-gray-300 px-2 py-1">{stu.phone}</td>
                    <td className="border border-gray-300 px-2 py-1">{stu.email}</td>
                    <td className="border border-gray-300 px-2 py-1">{stu.note}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}

      <button
        type="submit"
        className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700"
      >
        ‡∏™‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      </button>
    </form>
  );
};

